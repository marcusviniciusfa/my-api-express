{
  "openapi": "3.0.3",
  "info": {
    "title": "Swagger My API Express - OpenAPI 3.0",
    "version": "1.0.0",
    "description": "Documentation for My API Express based on the OpenAPI 3.0 specification",
    "contact": {
      "name": "Marcus Vinicius",
      "email": "marcusviniciusfa.dev@gmail.com"
    }
  },
  "servers": [
    {
      "url": "http://localhost:3000/api/{version}",
      "description": "Local server",
      "variables": {
        "version": {
          "default": "v1"
        }
      }
    }
  ],
  "tags": [
    {
      "name": "role",
      "description": "about Roles"
    },
    {
      "name": "user",
      "description": "about Users"
    }
  ],
  "paths": {
    "/roles": {
      "get": {
        "tags": [
          "role"
        ],
        "summary": "List all roles",
        "description": "Return all roles paginated",
        "parameters": [
          {
            "$ref": "#/components/parameters/pageParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "per_page": {
                      "type": "number",
                      "example": 10
                    },
                    "current_page": {
                      "type": "number",
                      "example": 1
                    },
                    "total": {
                      "type": "number",
                      "example": 1
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Role"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401GenericUnauthorized"
          },
          "500": {
            "$ref": "#/components/responses/500GenericInternalServerError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "role"
        ],
        "summary": "Create a new role",
        "description": "Create a new role if it doesn't exist yet",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "admin"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/201RoleCreated"
          },
          "401": {
            "$ref": "#/components/responses/401GenericUnauthorized"
          },
          "400": {
            "$ref": "#/components/responses/400RoleBadRequest"
          },
          "500": {
            "$ref": "#/components/responses/500GenericInternalServerError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/roles/{id}": {
      "get": {
        "tags": [
          "role"
        ],
        "summary": "Show a role",
        "description": "Return a role by Id",
        "parameters": [
          {
            "$ref": "#/components/parameters/roleIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "default": "error"
                    },
                    "message": {
                      "type": "string",
                      "default": "data/id must match pattern \"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$\" ❌"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401GenericUnauthorized"
          },
          "404": {
            "$ref": "#/components/responses/404RoleNotFound"
          },
          "500": {
            "$ref": "#/components/responses/500GenericInternalServerError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "role"
        ],
        "summary": "Update an existing role",
        "description": "Update an existing role by id",
        "parameters": [
          {
            "$ref": "#/components/parameters/roleIdParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "admin"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/200RoleOk"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "default": "error"
                    },
                    "message": {
                      "type": "string",
                      "default": "data/id must match pattern \"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$\" ❌"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401GenericUnauthorized"
          },
          "404": {
            "$ref": "#/components/responses/404RoleNotFound"
          },
          "500": {
            "$ref": "#/components/responses/500GenericInternalServerError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "role"
        ],
        "summary": "Delete an existing role",
        "description": "Delete an existing role by Id",
        "parameters": [
          {
            "$ref": "#/components/parameters/roleIdParam"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "data/id must match pattern \"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$\" ❌"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401GenericUnauthorized"
          },
          "404": {
            "$ref": "#/components/responses/404RoleNotFound"
          },
          "500": {
            "$ref": "#/components/responses/500GenericInternalServerError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/users": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "List all users",
        "description": "Return all users paginated",
        "parameters": [
          {
            "$ref": "#/components/parameters/pageParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "per_page": {
                      "type": "number",
                      "example": 10
                    },
                    "current_page": {
                      "type": "number",
                      "example": 1
                    },
                    "total": {
                      "type": "number",
                      "example": 1
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/User"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401GenericUnauthorized"
          },
          "500": {
            "$ref": "#/components/responses/500GenericInternalServerError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create a new user",
        "description": "Create a new user if it doesn't exist yet",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "Jack"
                  },
                  "email": {
                    "type": "string",
                    "example": "jack@email.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "12345678",
                    "minLength": 8
                  },
                  "is_admin": {
                    "type": "boolean",
                    "example": false
                  },
                  "role_id": {
                    "type": "string",
                    "format": "uuid",
                    "example": "29320837-afec-4c56-920f-d2d5522fa421"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/201UserCreated"
          },
          "400": {
            "$ref": "#/components/responses/400UserBadRequest"
          },
          "401": {
            "$ref": "#/components/responses/401GenericUnauthorized"
          },
          "500": {
            "$ref": "#/components/responses/500GenericInternalServerError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/users/profile": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "UpInsert user avatar",
        "description": "Insert or update a user's avatar",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/201UserCreated"
          },
          "400": {
            "$ref": "#/components/responses/400UserBadRequest"
          },
          "401": {
            "$ref": "#/components/responses/401GenericUnauthorized"
          },
          "500": {
            "$ref": "#/components/responses/500GenericInternalServerError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/users/profile/{id}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Show a user profile",
        "description": "Return a user by Id",
        "parameters": [
          {
            "$ref": "#/components/parameters/userIdParam"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200UserOk"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "default": "error"
                    },
                    "message": {
                      "type": "string",
                      "default": "data/id must match pattern \"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$\" ❌"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401GenericUnauthorized"
          },
          "404": {
            "$ref": "#/components/responses/404UserNotFound"
          },
          "500": {
            "$ref": "#/components/responses/500GenericInternalServerError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Update a user profile",
        "description": "Update a user by Id",
        "parameters": [
          {
            "$ref": "#/components/parameters/userIdParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "Jack"
                  },
                  "email": {
                    "type": "string",
                    "example": "jack@email.com"
                  },
                  "old_password": {
                    "type": "string",
                    "example": "12345678",
                    "minLength": 8
                  },
                  "new_password": {
                    "type": "string",
                    "example": "87654321",
                    "minLength": 8
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/200UserOk"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "default": "error"
                    },
                    "message": {
                      "type": "string",
                      "default": "old password does not match ❌"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401GenericUnauthorized"
          },
          "404": {
            "$ref": "#/components/responses/404UserNotFound"
          },
          "500": {
            "$ref": "#/components/responses/500GenericInternalServerError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/users/login": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Authenticate a user",
        "description": "Checks that the user has access to the API routes and returns an access token",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "jack@email.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "12345678",
                    "minLength": 8
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Ok",
            "headers": {
              "Set-Cookies": {
                "schema": {
                  "type": "string",
                  "example": "refresh-token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE2NzYzMjYwMTQsImV4cCI6MTY3NjMyNjEzNCwiYXVkIjoidXJuOmNsaWVudDphdWRpZW5jZTpyZWZyZXNoIiwiaXNzIjoidXJuOm15LWFwaS1leHByZXNzOmlzc3VlcjpyZWZyZXNoIn0.t6yo7hVvTsNzE_wkngiiULd5PTCq39wTvxwyXcaa9SA; Expires=Mon, 13 Feb 2023 19:08:54 GMT; Path=/; Secure; HttpOnly; Domain=localhost"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "accessToken": {
                      "type": "string",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2MWE4NTJhMi00NjBhLTQ2YWQtOWExMS1iYWNkMDM2ZmUwOTAiLCJpYXQiOjE2NzYzMjYwMTQsImV4cCI6MTY3NjMyNjA3NCwiYXVkIjoidXJuOmNsaWVudDphdWRpZW5jZTphY2Nlc3MiLCJpc3MiOiJ1cm46bXktYXBpLWV4cHJlc3M6aXNzdWVyOmFjY2VzcyJ9.VB4NUImV55EpO89pL44y2oqk8ApqtBmizEDLigt92zI"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "default": "error"
                    },
                    "message": {
                      "type": "string",
                      "default": "data/email must match pattern \"^[^@ \t\r\n]+@[^@ \t\r\n]+.[^@ \t\r\n]+$\" ❌"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "default": "error"
                    },
                    "message": {
                      "type": "string",
                      "default": "incorrect email/password combination 🔒"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500GenericInternalServerError"
          }
        }
      }
    },
    "/users/login/refresh": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Update access token",
        "description": "Checks if the refresh token is valid and returns a new access token",
        "parameters": [
          {
            "in": "header",
            "name": "Cookie",
            "schema": {
              "type": "string",
                "example": "refresh-token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE2NzYzMjYwMTQsImV4cCI6MTY3NjMyNjEzNCwiYXVkIjoidXJuOmNsaWVudDphdWRpZW5jZTpyZWZyZXNoIiwiaXNzIjoidXJuOm15LWFwaS1leHByZXNzOmlzc3VlcjpyZWZyZXNoIn0.t6yo7hVvTsNzE_wkngiiULd5PTCq39wTvxwyXcaa9SA; Expires=Mon, 13 Feb 2023 19:08:54 GMT; Path=/; Secure; HttpOnly; Domain=localhost"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "headers": {
              "Set-Cookies": {
                "schema": {
                  "type": "string",
                  "example": "refresh-token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE2NzYzMjYwMTQsImV4cCI6MTY3NjMyNjEzNCwiYXVkIjoidXJuOmNsaWVudDphdWRpZW5jZTpyZWZyZXNoIiwiaXNzIjoidXJuOm15LWFwaS1leHByZXNzOmlzc3VlcjpyZWZyZXNoIn0.t6yo7hVvTsNzE_wkngiiULd5PTCq39wTvxwyXcaa9SA; Expires=Mon, 13 Feb 2023 19:08:54 GMT; Path=/; Secure; HttpOnly; Domain=localhost"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "accessToken": {
                      "type": "string",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2MWE4NTJhMi00NjBhLTQ2YWQtOWExMS1iYWNkMDM2ZmUwOTAiLCJpYXQiOjE2NzYzMjYwMTQsImV4cCI6MTY3NjMyNjA3NCwiYXVkIjoidXJuOmNsaWVudDphdWRpZW5jZTphY2Nlc3MiLCJpc3MiOiJ1cm46bXktYXBpLWV4cHJlc3M6aXNzdWVyOmFjY2VzcyJ9.VB4NUImV55EpO89pL44y2oqk8ApqtBmizEDLigt92zI"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "default": "error"
                    },
                    "message": {
                      "type": "string",
                      "default": "data/email must match pattern \"^[^@ \t\r\n]+@[^@ \t\r\n]+.[^@ \t\r\n]+$\" ❌"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "default": "error"
                    },
                    "message": {
                      "type": "string",
                      "default": "incorrect email/password combination 🔒"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500GenericInternalServerError"
          }
        }
      }
    }
  },
  "components": {
    "responses": {
      "201RoleCreated": {
        "description": "Created",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Role"
            }
          }
        }
      },
      "201UserCreated": {
        "description": "Created",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/User"
            }
          }
        }
      },
      "200RoleOk": {
        "description": "Ok",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Role"
            }
          }
        }
      },
      "200UserOk": {
        "description": "Ok",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/User"
            }
          }
        }
      },
      "400RoleBadRequest": {
        "description": "Bad request",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "default": "error"
                },
                "message": {
                  "type": "string",
                  "default": "role already exists ❌"
                }
              }
            }
          }
        }
      },
      "400UserBadRequest": {
        "description": "Bad request",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "default": "error"
                },
                "message": {
                  "type": "string",
                  "default": "user already exists ❌"
                }
              }
            }
          }
        }
      },
      "401GenericUnauthorized": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "default": "error"
                },
                "message": {
                  "type": "string",
                  "default": "unauthenticated user 🔒"
                }
              }
            }
          }
        }
      },
      "404RoleNotFound": {
        "description": "Not found",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "default": "error"
                  },
                  "message": {
                    "type": "string",
                    "default": "role not found 🔎"
                  }
                }
              }
            }
          }
      },
      "404UserNotFound": {
        "description": "Not found",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "default": "error"
                  },
                  "message": {
                    "type": "string",
                    "default": "user not found 🔎"
                  }
                }
              }
            }
          }
      },
      "500GenericInternalServerError": {
        "description": "Internal server error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "default": "error"
                },
                "message": {
                  "type": "string",
                  "default": "internal server error 💥"
                }
              }
            }
          }
        }
      }
    },
    "parameters": {
      "pageParam": {
        "name": "page",
        "in": "query",
        "description": "Current page",
        "schema": {
          "type": "integer",
          "format": "int32",
          "minimum": 1,
          "default": 1
        }
      },
      "limitParam": {
        "name": "limit",
        "in": "query",
        "description": "Number of documents per page",
        "schema": {
          "type": "integer",
          "format": "int32",
          "minimum": 1,
          "default": 10
        }
      },
      "roleIdParam": {
        "name": "id",
        "in": "path",
        "required": true,
        "description": "Role id",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "userIdParam": {
        "name": "id",
        "in": "path",
        "required": true,
        "description": "User id",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "schemas": {
      "Role": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "29320837-afec-4c56-920f-d2d5522fa421"
          },
          "name": {
            "type": "string",
            "example": "admin"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "1970-01-01T00:00:00.000Z"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
            "id": {
              "type": "string",
              "format": "uuid",
              "example": "847c4f08-ec9f-4b7f-b452-12d69d86efbe"
            },
            "name": {
              "type": "string",
              "example": "Jack"
            },
            "email": {
              "type": "string",
              "example": "jack@email.com"
            },
            "is_admin": {
              "type": "boolean",
              "example": false
            },
            "avatar_url": {
              "type": "string",
              "format": "url",
              "example": "http://localhost:3000/files/fd9a6444ba7b0a8f3ad1fff050edd669_avatar.jpeg"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "example": "1970-01-01T00:00:00.000Z"
            },
            "role_id": {
              "type": "string",
              "format": "uuid",
              "example": "29320837-afec-4c56-920f-d2d5522fa421"
            }
          }
        }
      },
      "securitySchemes": {
        "bearerAuth": {
          "type": "http",
          "scheme": "bearer",
          "bearerFormat": "JWT",
          "description": "login to endpoint users/login with admin user email and password"
        }
      }
    }
  }
